import pandas as pd
import numpy as np
from gplearn.genetic import SymbolicClassifier
from gplearn.functions import make_function
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

# Sample data and preprocessing (same as before)
data = {
    'action': ['Buy', 'Sell', 'Buy', 'Sell', 'Buy', 'Sell', 'Buy', 'Sell'],
    'qty': [100, -50, -75, 200, -120, 80, 50, -90]
}
df = pd.DataFrame(data)
df['true_action'] = np.where(df['qty'] < 0, 
                           np.where(df['action'] == 'Buy', 'Sell', 'Buy'),
                           df['action'])

le = LabelEncoder()
df['action_code'] = le.fit_transform(df['action'])
X = df[['action_code', 'qty']]
y = le.fit_transform(df['true_action'])

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Custom functions for gplearn
def is_negative(x):
    return np.where(x < 0, 1, 0)

def flip(x):
    return 1 - x

def if_then_else(cond, x, y):
    return np.where(cond, x, y)

is_neg = make_function(function=is_negative, name='is_neg', arity=1)
flip_func = make_function(function=flip, name='flip', arity=1)
ite = make_function(function=if_then_else, name='ite', arity=3)

# Create and train gplearn model
est_gp = SymbolicClassifier(
    population_size=5000,
    generations=100,
    stopping_criteria=0.0,
    p_crossover=0.7,
    p_subtree_mutation=0.1,
    p_hoist_mutation=0.05,
    p_point_mutation=0.1,
    max_samples=0.9,
    verbose=1,
    parsimony_coefficient=0.01,
    random_state=42,
    function_set=(
        'add', 'sub', 'mul', 'div',
        is_neg, flip_func, ite
    )
)

est_gp.fit(X_train, y_train)

# Print the best program
print("Best program found by gplearn:")
print(est_gp._program)
print("\n")

# Function to get the name of a function
def get_func_name(func):
    if hasattr(func, '__name__'):
        return func.__name__
    elif hasattr(func, 'name'):
        return func.name
    else:
        return str(func)

# Mapping of function objects to their string names
func_to_str = {
    is_negative: 'is_neg',
    flip: 'flip',
    if_then_else: 'ite'
}

# Helper function to make the rule more readable
def make_readable(node, feature_names):
    if isinstance(node, str):
        if node.startswith('X'):
            idx = int(node[1:])
            return feature_names[idx]
        else:
            return node
    elif isinstance(node, (int, float)):
        return f"{node}"
    elif callable(node):
        return func_to_str.get(node, get_func_name(node))
    else:
        name, *args = node
        if callable(name):
            name = func_to_str.get(name, get_func_name(name))
        
        if name == 'ite':
            cond, x, y = [make_readable(arg, feature_names) for arg in args]
            return f"ite({cond}, {x}, {y})"
        elif name == 'is_neg':
            arg = make_readable(args[0], feature_names)
            return f"is_neg({arg})"
        elif name == 'flip':
            arg = make_readable(args[0], feature_names)
            return f"flip({arg})"
        else:
            args = [make_readable(arg, feature_names) for arg in args]
            return f"{name}({', '.join(args)})"

# New function to translate gplearn's rule into domain-specific language
def translate_to_trading_rule(program, feature_names):
    def _translate(node):
        if isinstance(node, str):
            if node == 'action':
                return "the trader's original intention"
            elif node == 'qty':
                return "the order quantity"
            else:
                return node
        elif isinstance(node, (int, float)):
            return f"{node}"
        elif callable(node):
            name = func_to_str.get(node, get_func_name(node))
            if name == 'is_neg':
                return "is a short position (qty < 0)"
            elif name == 'flip':
                return "reverse the trader's intention"
            else:
                return name
        else:
            name, *args = node
            if callable(name):
                name = func_to_str.get(name, get_func_name(name))
            
            if name == 'ite':
                cond, x, y = map(_translate, args)
                return f"If {cond}, then {x}. Otherwise, {y}."
            elif name == 'is_neg':
                arg = _translate(args[0])
                return f"{arg} is a short position"
            elif name == 'flip':
                arg = _translate(args[0])
                return f"reverse {arg}"
            else:
                args = map(_translate, args)
                return f"{name}({', '.join(args)})"
    
    rule = _translate(program.program)
    return f"Trading Rule: {rule}"

# Convert the best program to a readable format and then to a trading rule
symbolic_rule = make_readable(est_gp._program.program, ['action', 'qty'])
print("Symbolic Rule:")
print(symbolic_rule)
print("\n")

trading_rule = translate_to_trading_rule(est_gp._program, ['action', 'qty'])
print(trading_rule)
print("\n")

# Test the rule on some examples
examples = [
    {'action': 'Buy', 'qty': -50},
    {'action': 'Sell', 'qty': -75},
    {'action': 'Buy', 'qty': 100},
    {'action': 'Sell', 'qty': 200},
    {'action': 'Buy', 'qty': -10},
    {'action': 'Sell', 'qty': -5}
]

for example in examples:
    action = example['action']
    qty = example['qty']
    
    new_data = pd.DataFrame([example])
    new_data['action_code'] = le.transform(new_data['action'])
    X_new = new_data[['action_code', 'qty']]
    y_pred = est_gp.predict(X_new)
    predicted_action = le.inverse_transform(y_pred)[0]
    
    print(f"Scenario: Trader wants to {action} {qty} units")
    print(f"  System advises: {predicted_action}\n")
