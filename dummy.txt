import pandas as pd
import numpy as np
from gplearn.genetic import SymbolicClassifier
from gplearn.functions import make_function
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

# Sample data
data = {
    'action': ['Buy', 'Sell', 'Buy', 'Sell', 'Buy', 'Sell', 'Buy', 'Sell'],
    'qty': [100, -50, -75, 200, -120, 80, 50, -90]
}
df = pd.DataFrame(data)

# Create target: True action based on qty sign
df['true_action'] = np.where(df['qty'] < 0, 
                           np.where(df['action'] == 'Buy', 'Sell', 'Buy'),
                           df['action'])

# Prepare data for model
le = LabelEncoder()
df['action_code'] = le.fit_transform(df['action'])
X = df[['action_code', 'qty']]
y = le.fit_transform(df['true_action'])

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Custom functions for gplearn
def is_negative(x):
    return np.where(x < 0, 1, 0)

def equals(x, y):
    return np.where(x == y, 1, 0)

def flip(x):
    return 1 - x

is_neg = make_function(function=is_negative, name='is_neg', arity=1)
eq = make_function(function=equals, name='eq', arity=2)
flip_func = make_function(function=flip, name='flip', arity=1)

# Create and train gplearn model
est_gp = SymbolicClassifier(
    population_size=1000,
    generations=20,
    stopping_criteria=0.0,
    p_crossover=0.7,
    p_subtree_mutation=0.1,
    p_hoist_mutation=0.05,
    p_point_mutation=0.1,
    max_samples=0.9,
    verbose=1,
    parsimony_coefficient=0.01,
    random_state=0,
    function_set=('and', 'or', 'not', 'if', 'eq', 'is_neg', 'flip')
)

est_gp.fit(X_train, y_train)

# Print the best program
print("Best program:", est_gp._program)

# Make predictions on test set
y_pred = est_gp.predict(X_test)

# Calculate accuracy
accuracy = (y_pred == y_test).mean()
print(f"Accuracy: {accuracy}")

# Example predictions
new_data = pd.DataFrame({
    'action': ['Buy', 'Sell', 'Buy'],
    'qty': [-50, -75, 100]
})
new_data['action_code'] = le.transform(new_data['action'])
X_new = new_data[['action_code', 'qty']]
y_pred_new = est_gp.predict(X_new)
new_data['predicted_action'] = le.inverse_transform(y_pred_new)
print("\nPredictions:")
print(new_data)
