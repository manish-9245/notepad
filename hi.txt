public class ArtemisConnectionFactory implements jakarta.jms.ConnectionFactory {

  private final ActiveMQConnectionFactory factory;

  public ArtemisConnectionFactory(String brokerUrl, String username, String password) {
    this.factory = new ActiveMQConnectionFactory(brokerUrl, username, password);
  }

  @Override
  public jakarta.jms.Connection createConnection() throws JMSException {
    return factory.createConnection();
  }

}



import org.apache.hc.client5.http.classic.CloseableHttpClient;
import org.apache.hc.client5.http.classic.CloseableHttpResponse;
import org.apache.hc.client5.http.classic.HttpClient;
import org.apache.hc.client5.http.classic.methods.HttpGet;
import org.apache.hc.core5.ssl.SSLContextBuilder;
import org.apache.hc.core5.ssl.TrustStrategy;
import org.springframework.http.client.ClientHttpRequestFactory;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;

@Configuration
public class MyConfiguration {

    @Bean("MakerCheckerTemplate")
    public RestTemplate makerCheckerTemplate() {
        try {
            TrustStrategy trustStrategy = (chain, authType) -> true; // Trust all certificates (for development only)
            HttpClient httpClient = HttpClients.custom()
                    .setSSLContext(SSLContextBuilder.custom().loadTrustMaterial(trustStrategy).build())
                    .build();
            ClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(httpClient);
            return new RestTemplate(requestFactory);
        } catch (Exception e) {
            throw new RuntimeException("Error creating HttpClient", e);
        }
    }
}